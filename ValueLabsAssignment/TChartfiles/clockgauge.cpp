// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "clockgauge.h"

// Dispatch interfaces referenced by this interface
#include "teeshape.h"
#include "teerect.h"
#include "framedborder.h"
#include "gaugepointerrange.h"
#include "gaugeseriespointer.h"
#include "gaugeranges.h"
#include "pointer.h"
#include "lineargauge.h"
#include "numericgauge.h"
#include "axis.h"
#include "gaugehand.h"
#include "gaugehands.h"


/////////////////////////////////////////////////////////////////////////////
// CClockGauge properties

/////////////////////////////////////////////////////////////////////////////
// CClockGauge operations

CTeeShape CClockGauge::GetFace()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60020000, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeeShape(pDispatch);
}

double CClockGauge::GetValue()
{
	double result;
	InvokeHelper(0xcb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xcb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CTeeRect CClockGauge::GetCustomBounds()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeeRect(pDispatch);
}

unsigned long CClockGauge::GetPaletteColor(long Index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void CClockGauge::SetCustomBounds(long ALeft, long ATop, long ARight, long ABottom)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ALeft, ATop, ARight, ABottom);
}

CFramedBorder CClockGauge::GetFrame()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CFramedBorder(pDispatch);
}

CGaugePointerRange CClockGauge::GetGreenLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugePointerRange(pDispatch);
}

BOOL CClockGauge::GetHorizontal()
{
	BOOL result;
	InvokeHelper(0x12f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetHorizontal(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x12f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double CClockGauge::GetMaximum()
{
	double result;
	InvokeHelper(0x130, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetMaximum(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x130, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CClockGauge::GetMinimum()
{
	double result;
	InvokeHelper(0x131, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetMinimum(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x131, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CClockGauge::GetMinorTickDistance()
{
	long result;
	InvokeHelper(0x132, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetMinorTickDistance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x132, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CGaugeSeriesPointer CClockGauge::GetMinorTicks()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x133, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeSeriesPointer(pDispatch);
}

CGaugePointerRange CClockGauge::GetRedLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x134, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugePointerRange(pDispatch);
}

CGaugeSeriesPointer CClockGauge::GetTicks()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x135, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeSeriesPointer(pDispatch);
}

CGaugeRanges CClockGauge::GetAxisRanges()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeRanges(pDispatch);
}

CGaugeRanges CClockGauge::GetRanges()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x136, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeRanges(pDispatch);
}

CGaugeSeriesPointer CClockGauge::GetCenter()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x191, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeSeriesPointer(pDispatch);
}

BOOL CClockGauge::GetCircled()
{
	BOOL result;
	InvokeHelper(0x192, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetCircled(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x192, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CPointer CClockGauge::GetEndPoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x193, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointer(pDispatch);
}

BOOL CClockGauge::GetLabelsInside()
{
	BOOL result;
	InvokeHelper(0x195, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetLabelsInside(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x195, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CClockGauge::GetRotateLabels()
{
	BOOL result;
	InvokeHelper(0x196, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetRotateLabels(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x196, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double CClockGauge::GetRotationAngle()
{
	double result;
	InvokeHelper(0x197, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetRotationAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x197, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CClockGauge::GetTotalAngle()
{
	double result;
	InvokeHelper(0x198, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetTotalAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x198, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CClockGauge::GetAutoPositionLinearGauge()
{
	BOOL result;
	InvokeHelper(0x199, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetAutoPositionLinearGauge(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x199, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CClockGauge::GetAutoValueLinearGauge()
{
	BOOL result;
	InvokeHelper(0x19a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetAutoValueLinearGauge(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CClockGauge::GetAutoPositionNumericGauge()
{
	BOOL result;
	InvokeHelper(0x19b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetAutoPositionNumericGauge(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CClockGauge::GetAutoValueNumericGauge()
{
	BOOL result;
	InvokeHelper(0x19c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetAutoValueNumericGauge(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CClockGauge::GetDisplayTotalAngle()
{
	long result;
	InvokeHelper(0x19d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetDisplayTotalAngle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CClockGauge::GetDisplayRotationAngle()
{
	long result;
	InvokeHelper(0x19e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetDisplayRotationAngle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CClockGauge::GetFillToSemiCircle()
{
	BOOL result;
	InvokeHelper(0x19f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetFillToSemiCircle(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CClockGauge::GetHandOffset()
{
	long result;
	InvokeHelper(0x1a1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetHandOffset(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CLinearGauge CClockGauge::GetLinearGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLinearGauge(pDispatch);
}

CNumericGauge CClockGauge::GetNumericGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CNumericGauge(pDispatch);
}

CAxis CClockGauge::GetAxis()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CAxis(pDispatch);
}

BOOL CClockGauge::GetUseAxis()
{
	BOOL result;
	InvokeHelper(0x1a5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CClockGauge::GetCircleXCenter()
{
	long result;
	InvokeHelper(0x1a6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CClockGauge::GetCircleYCenter()
{
	long result;
	InvokeHelper(0x1a7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CClockGauge::GetXRadius()
{
	long result;
	InvokeHelper(0x1a8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CClockGauge::GetYRadius()
{
	long result;
	InvokeHelper(0x1a9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CFramedBorder CClockGauge::GetCircularFrame()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CFramedBorder(pDispatch);
}

CGaugeHand CClockGauge::GetHand()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x194, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeHand(pDispatch);
}

CGaugeHands CClockGauge::GetHands()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1aa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeHands(pDispatch);
}

CGaugeHand CClockGauge::GetHours()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeHand(pDispatch);
}

CGaugeHand CClockGauge::GetMinutes()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeHand(pDispatch);
}

CGaugeHand CClockGauge::GetSeconds()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeHand(pDispatch);
}

BOOL CClockGauge::GetCustomTime()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetCustomTime(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CClockGauge::GetSnapToSeconds()
{
	BOOL result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetSnapToSeconds(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CClockGauge::GetStyle()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double CClockGauge::GetTime()
{
	double result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CClockGauge::SetTime(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}
