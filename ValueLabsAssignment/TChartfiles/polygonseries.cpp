// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "polygonseries.h"

// Dispatch interfaces referenced by this interface
#include "areaseries.h"
#include "arrowseries.h"
#include "barseries.h"
#include "bubbleseries.h"
#include "candleseries.h"
#include "errorbarseries.h"
#include "fastlineseries.h"
#include "ganttseries.h"
#include "horizbarseries.h"
#include "lineseries.h"
#include "pieseries.h"
#include "pointseries.h"
#include "polarseries.h"
#include "shapeseries.h"
#include "surfaceseries.h"
#include "volumeseries.h"
#include "teefunction.h"
#include "marks.h"
#include "valuelist.h"
#include "bezierseries.h"
#include "contourseries.h"
#include "errorseries.h"
#include "point3dseries.h"
#include "radarseries.h"
#include "clockseries.h"
#include "windroseseries.h"
#include "bar3dseries.h"
#include "imagebarseries.h"
#include "teepoint2d.h"
#include "donutseries.h"
#include "trisurfaceseries.h"
#include "boxplotseries.h"
#include "horizboxplotseries.h"
#include "histogramseries.h"
#include "colorgridseries.h"
#include "horizlineseries.h"
#include "barjoinseries.h"
#include "highlowseries.h"
#include "waterfallseries.h"
#include "smithseries.h"
#include "pyramidseries.h"
#include "mapseries.h"
#include "funnelseries.h"
#include "calendarseries.h"
#include "valuelists.h"
#include "horizareaseries.h"
#include "pointfigureseries.h"
#include "gaugeseries.h"
#include "pen.h"
#include "vector3dseries.h"
#include "towerseries.h"
#include "polarbarseries.h"
#include "bubble3dseries.h"
#include "horizhistogramseries.h"
#include "volumepipeseries.h"
#include "isosurfaceseries.h"
#include "darvasseries.h"
#include "highlowlineseries.h"
#include "polargridseries.h"
#include "brush.h"
#include "deltapointseries.h"
#include "imagepointseries.h"
#include "orgseries.h"
#include "worldseries.h"
#include "tagcloudseries.h"
#include "kagiseries.h"
#include "renkoseries.h"
#include "numericgauge.h"
#include "lineargauge.h"
#include "circulargauge.h"
#include "knobgauge.h"
#include "roseseries.h"
#include "ternaryseries.h"
#include "treemapseries.h"
#include "linepointseries.h"
#include "errorpointseries.h"
#include "errorpoint3dseries.h"
#include "equivolumeseries.h"
#include "doublehorizbarseries.h"
#include "textshape.h"
#include "polarcontourseries.h"
#include "teeselected.h"
#include "activitygauge.h"
#include "equalizerseries.h"
#include "clockgauge.h"
#include "mappolygon.h"


/////////////////////////////////////////////////////////////////////////////
// CPolygonSeries properties

/////////////////////////////////////////////////////////////////////////////
// CPolygonSeries operations

BOOL CPolygonSeries::GetActive()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CAreaSeries CPolygonSeries::GetAsArea()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CAreaSeries(pDispatch);
}

CArrowSeries CPolygonSeries::GetAsArrow()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CArrowSeries(pDispatch);
}

CBarSeries CPolygonSeries::GetAsBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBarSeries(pDispatch);
}

CBubbleSeries CPolygonSeries::GetAsBubble()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBubbleSeries(pDispatch);
}

CCandleSeries CPolygonSeries::GetAsCandle()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCandleSeries(pDispatch);
}

CErrorBarSeries CPolygonSeries::GetAsErrorBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CErrorBarSeries(pDispatch);
}

CFastLineSeries CPolygonSeries::GetAsFastLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CFastLineSeries(pDispatch);
}

CGanttSeries CPolygonSeries::GetAsGantt()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGanttSeries(pDispatch);
}

CHorizBarSeries CPolygonSeries::GetAsHorizBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHorizBarSeries(pDispatch);
}

CLineSeries CPolygonSeries::GetAsLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLineSeries(pDispatch);
}

CPieSeries CPolygonSeries::GetAsPie()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPieSeries(pDispatch);
}

CPointSeries CPolygonSeries::GetAsPoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointSeries(pDispatch);
}

CPolarSeries CPolygonSeries::GetAsPolar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPolarSeries(pDispatch);
}

CShapeSeries CPolygonSeries::GetAsShape()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CShapeSeries(pDispatch);
}

CSurfaceSeries CPolygonSeries::GetAsSurface()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CSurfaceSeries(pDispatch);
}

CVolumeSeries CPolygonSeries::GetAsVolume()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVolumeSeries(pDispatch);
}

unsigned long CPolygonSeries::GetColor()
{
	unsigned long result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CPolygonSeries::GetColorEachPoint()
{
	BOOL result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetColorEachPoint(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CPolygonSeries::GetCount()
{
	long result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

short CPolygonSeries::GetCursor()
{
	short result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetCursor(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

VARIANT CPolygonSeries::GetDataSource()
{
	VARIANT result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetDataSource(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

long CPolygonSeries::GetFirstValueIndex()
{
	long result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CTeeFunction CPolygonSeries::GetFunctionType()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeeFunction(pDispatch);
}

long CPolygonSeries::GetHorizontalAxis()
{
	long result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetHorizontalAxis(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString CPolygonSeries::GetLabelsSource()
{
	CString result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetLabelsSource(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long CPolygonSeries::GetLastValueIndex()
{
	long result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CMarks CPolygonSeries::GetMarks()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CMarks(pDispatch);
}

CString CPolygonSeries::GetName()
{
	CString result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CPolygonSeries::GetPercentFormat()
{
	CString result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetPercentFormat(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

unsigned long CPolygonSeries::GetPointColor(long Index)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void CPolygonSeries::SetPointColor(long Index, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

CString CPolygonSeries::GetPointLabel(long Index)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Index);
	return result;
}

void CPolygonSeries::SetPointLabel(long Index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, lpszNewValue);
}

double CPolygonSeries::GetPointValue(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void CPolygonSeries::SetPointValue(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

long CPolygonSeries::GetSeriesType()
{
	long result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CPolygonSeries::GetShowInLegend()
{
	BOOL result;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetShowInLegend(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString CPolygonSeries::GetTitle()
{
	CString result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetTitle(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CPolygonSeries::GetValueFormat()
{
	CString result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetValueFormat(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString CPolygonSeries::GetValueMarkText(long ValueIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		ValueIndex);
	return result;
}

long CPolygonSeries::GetVerticalAxis()
{
	long result;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetVerticalAxis(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CValueList CPolygonSeries::GetXValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPolygonSeries::GetYValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

long CPolygonSeries::Add(double AValue, LPCTSTR ALabel, unsigned long Value)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AValue, ALabel, Value);
	return result;
}

long CPolygonSeries::AddNull(LPCTSTR SomeLabel)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeLabel);
	return result;
}

long CPolygonSeries::AddXY(double AX, double AY, LPCTSTR ALabel, unsigned long Value)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_BSTR VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AX, AY, ALabel, Value);
	return result;
}

long CPolygonSeries::CalcXPos(long SomeValueIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValueIndex);
	return result;
}

long CPolygonSeries::CalcXPosValue(double SomeValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValue);
	return result;
}

long CPolygonSeries::CalcXSizeValue(double SomeValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValue);
	return result;
}

long CPolygonSeries::CalcYPos(long SomeValueIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValueIndex);
	return result;
}

long CPolygonSeries::CalcYPosValue(double SomeValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValue);
	return result;
}

long CPolygonSeries::CalcYSizeValue(double SomeValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		SomeValue);
	return result;
}

void CPolygonSeries::CheckDataSource()
{
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPolygonSeries::Clear()
{
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CPolygonSeries::Clicked(long XCoord, long YCoord)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		XCoord, YCoord);
	return result;
}

void CPolygonSeries::Delete(long Index)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Index);
}

void CPolygonSeries::FillSampleValues(long NumValues)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NumValues);
}

long CPolygonSeries::GetMousePoint()
{
	long result;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CPolygonSeries::IsNull(long ValueIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ValueIndex);
	return result;
}

void CPolygonSeries::RefreshSeries()
{
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPolygonSeries::SetFunction(long AFunction)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 AFunction);
}

void CPolygonSeries::SwapValues(long a, long b)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 a, b);
}

double CPolygonSeries::XScreenToValue(long ScreenCoord)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		ScreenCoord);
	return result;
}

CString CPolygonSeries::XValueToText(double SomeValue)
{
	CString result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		SomeValue);
	return result;
}

double CPolygonSeries::YScreenToValue(long ScreenCoord)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		ScreenCoord);
	return result;
}

CString CPolygonSeries::YValueToText(double SomeValue)
{
	CString result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		SomeValue);
	return result;
}

CBezierSeries CPolygonSeries::GetAsBezier()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBezierSeries(pDispatch);
}

CContourSeries CPolygonSeries::GetAsContour()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CContourSeries(pDispatch);
}

CErrorSeries CPolygonSeries::GetAsError()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CErrorSeries(pDispatch);
}

CPoint3DSeries CPolygonSeries::GetAsPoint3D()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPoint3DSeries(pDispatch);
}

CRadarSeries CPolygonSeries::GetAsRadar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x47, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRadarSeries(pDispatch);
}

long CPolygonSeries::AddNullXY(double X, double Y, LPCTSTR ALabel)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_BSTR;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		X, Y, ALabel);
	return result;
}

CString CPolygonSeries::LegendString(long LegendIndex, long LegendTextStyle)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		LegendIndex, LegendTextStyle);
	return result;
}

unsigned long CPolygonSeries::LegendItemColor(long LegendIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		LegendIndex);
	return result;
}

long CPolygonSeries::CountLegendItems()
{
	long result;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CPolygonSeries::LegendToValueIndex(long LegendIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		LegendIndex);
	return result;
}

long CPolygonSeries::VisibleCount()
{
	long result;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::AssignValues(long SeriesIndex)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 SeriesIndex);
}

long CPolygonSeries::GetHorizontalAxisCustom()
{
	long result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetHorizontalAxisCustom(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CPolygonSeries::GetVerticalAxisCustom()
{
	long result;
	InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetVerticalAxisCustom(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CClockSeries CPolygonSeries::GetAsClock()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x50, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CClockSeries(pDispatch);
}

CWindRoseSeries CPolygonSeries::GetAsWindRose()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x51, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWindRoseSeries(pDispatch);
}

CBar3DSeries CPolygonSeries::GetAsBar3D()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x52, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBar3DSeries(pDispatch);
}

CImageBarSeries CPolygonSeries::GetAsImageBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x53, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CImageBarSeries(pDispatch);
}

void CPolygonSeries::DisconnectAxisCustom(BOOL IsHorizontal)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 IsHorizontal);
}

CTeePoint2D CPolygonSeries::GetMouseValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x56, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeePoint2D(pDispatch);
}

void CPolygonSeries::AddArray(long ArraySize, const VARIANT& YArray, const VARIANT& XArray)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ArraySize, &YArray, &XArray);
}

long CPolygonSeries::GetDepth()
{
	long result;
	InvokeHelper(0x57, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetDepth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x57, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CDonutSeries CPolygonSeries::GetAsDonut()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x59, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CDonutSeries(pDispatch);
}

CTriSurfaceSeries CPolygonSeries::GetAsTriSurface()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTriSurfaceSeries(pDispatch);
}

CBoxPlotSeries CPolygonSeries::GetAsBoxPlot()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBoxPlotSeries(pDispatch);
}

CHorizBoxPlotSeries CPolygonSeries::GetAsHorizBoxPlot()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHorizBoxPlotSeries(pDispatch);
}

CHistogramSeries CPolygonSeries::GetAsHistogram()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHistogramSeries(pDispatch);
}

CColorGridSeries CPolygonSeries::GetAsColorGrid()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CColorGridSeries(pDispatch);
}

CHorizLineSeries CPolygonSeries::GetAsHorizLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x5f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHorizLineSeries(pDispatch);
}

CBarJoinSeries CPolygonSeries::GetAsBarJoin()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x60, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBarJoinSeries(pDispatch);
}

CHighLowSeries CPolygonSeries::GetAsHighLow()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x61, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHighLowSeries(pDispatch);
}

CWaterfallSeries CPolygonSeries::GetAsWaterfall()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x62, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWaterfallSeries(pDispatch);
}

CSmithSeries CPolygonSeries::GetAsSmith()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x63, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CSmithSeries(pDispatch);
}

CPyramidSeries CPolygonSeries::GetAsPyramid()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPyramidSeries(pDispatch);
}

CMapSeries CPolygonSeries::GetAsMap()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CMapSeries(pDispatch);
}

CFunnelSeries CPolygonSeries::GetAsFunnel()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x58, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CFunnelSeries(pDispatch);
}

CCalendarSeries CPolygonSeries::GetAsCalendar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCalendarSeries(pDispatch);
}

void CPolygonSeries::FreeDatasource(BOOL SurePrompt)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 SurePrompt);
}

long CPolygonSeries::GetDatasourceType()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetDatasourceType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CValueLists CPolygonSeries::GetValueLists()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueLists(pDispatch);
}

BOOL CPolygonSeries::IsNan(double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Value);
	return result;
}

void CPolygonSeries::DeleteRange(long start, long Quantity)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 start, Quantity);
}

void CPolygonSeries::SortByLabels(long Order)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Order);
}

void CPolygonSeries::SetNull(long ValueIndex)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ValueIndex);
}

CHorizAreaSeries CPolygonSeries::GetAsHorizArea()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHorizAreaSeries(pDispatch);
}

CPointFigureSeries CPolygonSeries::GetAsPointFigure()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointFigureSeries(pDispatch);
}

CGaugeSeries CPolygonSeries::GetAsGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CGaugeSeries(pDispatch);
}

CPen1 CPolygonSeries::GetPen()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPen1(pDispatch);
}

CVector3DSeries CPolygonSeries::GetAsVector3D()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVector3DSeries(pDispatch);
}

CTowerSeries CPolygonSeries::GetAsTower()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTowerSeries(pDispatch);
}

double CPolygonSeries::MaxVisibleValue(long valueList)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd1, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		valueList);
	return result;
}

double CPolygonSeries::MinVisibleValue(long valueList)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd2, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		valueList);
	return result;
}

CPolarBarSeries CPolygonSeries::GetAsPolarBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPolarBarSeries(pDispatch);
}

CBubble3DSeries CPolygonSeries::GetAsBubble3D()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBubble3DSeries(pDispatch);
}

CHorizHistogramSeries CPolygonSeries::GetAsHorizHistogram()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHorizHistogramSeries(pDispatch);
}

BOOL CPolygonSeries::GetShowInEditor()
{
	BOOL result;
	InvokeHelper(0xd6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetShowInEditor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CVolumePipeSeries CPolygonSeries::GetAsVolumePipe()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CVolumePipeSeries(pDispatch);
}

CIsoSurfaceSeries CPolygonSeries::GetAsIsoSurface()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CIsoSurfaceSeries(pDispatch);
}

CDarvasSeries CPolygonSeries::GetAsDarvas()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CDarvasSeries(pDispatch);
}

CHighLowLineSeries CPolygonSeries::GetAsHighLowLine()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xda, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CHighLowLineSeries(pDispatch);
}

CPolarGridSeries CPolygonSeries::GetAsPolarGrid()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xdb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPolarGridSeries(pDispatch);
}

BOOL CPolygonSeries::GetYMandatory()
{
	BOOL result;
	InvokeHelper(0xdc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::BeginUpdate()
{
	InvokeHelper(0xdd, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPolygonSeries::EndUpdate()
{
	InvokeHelper(0xde, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CBrush1 CPolygonSeries::GetBrush()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xdf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBrush1(pDispatch);
}

CValueList CPolygonSeries::GetMandatoryValueList()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPolygonSeries::GetNotMandatoryValueList()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CDeltaPointSeries CPolygonSeries::GetAsDeltaPoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CDeltaPointSeries(pDispatch);
}

CImagePointSeries CPolygonSeries::GetAsImagePoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CImagePointSeries(pDispatch);
}

COrgSeries CPolygonSeries::GetAsOrganizational()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COrgSeries(pDispatch);
}

CWorldSeries CPolygonSeries::GetAsWorld()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CWorldSeries(pDispatch);
}

CTagCloudSeries CPolygonSeries::GetAsTagCloud()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTagCloudSeries(pDispatch);
}

CKagiSeries CPolygonSeries::GetAsKagi()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CKagiSeries(pDispatch);
}

CRenkoSeries CPolygonSeries::GetAsRenko()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRenkoSeries(pDispatch);
}

BOOL CPolygonSeries::IsValidSourceOf(long SeriesIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SeriesIndex);
	return result;
}

BOOL CPolygonSeries::IsValidSeriesSource(long SeriesIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xea, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SeriesIndex);
	return result;
}

BOOL CPolygonSeries::UseAxis()
{
	BOOL result;
	InvokeHelper(0xeb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CPolygonSeries::GetColorSource()
{
	CString result;
	InvokeHelper(0xec, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetColorSource(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CNumericGauge CPolygonSeries::GetAsNumericGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xed, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CNumericGauge(pDispatch);
}

CLinearGauge CPolygonSeries::GetAsLinearGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLinearGauge(pDispatch);
}

CCircularGauge CPolygonSeries::GetAsCircularGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CCircularGauge(pDispatch);
}

long CPolygonSeries::GetZOrder()
{
	long result;
	InvokeHelper(0xf0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetZOrder(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CKnobGauge CPolygonSeries::GetAsKnobGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CKnobGauge(pDispatch);
}

CRoseSeries CPolygonSeries::GetAsRose()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CRoseSeries(pDispatch);
}

CTernarySeries CPolygonSeries::GetAsTernary()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTernarySeries(pDispatch);
}

CTreeMapSeries CPolygonSeries::GetAsTreeMap()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTreeMapSeries(pDispatch);
}

CLinePointSeries CPolygonSeries::GetAsLinePoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLinePointSeries(pDispatch);
}

double CPolygonSeries::GetDefaultNullValue()
{
	double result;
	InvokeHelper(0xf6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetDefaultNullValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xf6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CString CPolygonSeries::GetLegendTitle()
{
	CString result;
	InvokeHelper(0xf7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetLegendTitle(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xf7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CErrorPointSeries CPolygonSeries::GetAsErrorPoint()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CErrorPointSeries(pDispatch);
}

CErrorPoint3DSeries CPolygonSeries::GetAsErrorPoint3D()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CErrorPoint3DSeries(pDispatch);
}

VARIANT CPolygonSeries::GetTag()
{
	VARIANT result;
	InvokeHelper(0xfa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetTag(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xfa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

CEquiVolumeSeries CPolygonSeries::GetAsEquiVolume()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xfb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CEquiVolumeSeries(pDispatch);
}

long CPolygonSeries::GetTransparency()
{
	long result;
	InvokeHelper(0xfc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetTransparency(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CDoubleHorizBarSeries CPolygonSeries::GetAsDoubleHorizBar()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xfd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CDoubleHorizBarSeries(pDispatch);
}

CTextShape CPolygonSeries::GetLegend()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xfe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTextShape(pDispatch);
}

CPolarContourSeries CPolygonSeries::GetAsPolarContour()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xff, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPolarContourSeries(pDispatch);
}

VARIANT CPolygonSeries::GetSeriesLinkx64()
{
	VARIANT result;
	InvokeHelper(0x100, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

CTeeSelected CPolygonSeries::GetSelected()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x101, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeeSelected(pDispatch);
}

void CPolygonSeries::AppendArray(long ArraySize, const VARIANT& YArray, const VARIANT& XArray)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x102, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ArraySize, &YArray, &XArray);
}

CActivityGauge CPolygonSeries::GetAsActivityGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x103, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CActivityGauge(pDispatch);
}

CEqualizerSeries CPolygonSeries::GetAsEqualizerSeries()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x104, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CEqualizerSeries(pDispatch);
}

BOOL CPolygonSeries::GetCalcVisiblePoints()
{
	BOOL result;
	InvokeHelper(0x105, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPolygonSeries::SetCalcVisiblePoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x105, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CClockGauge CPolygonSeries::GetAsClockGauge()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x106, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CClockGauge(pDispatch);
}

CMapPolygon CPolygonSeries::GetPolygon()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x12d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CMapPolygon(pDispatch);
}
