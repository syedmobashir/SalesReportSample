// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "treemapseries.h"

// Dispatch interfaces referenced by this interface
#include "orgitem.h"
#include "orgshape.h"
#include "orgitemcollection.h"
#include "spacing.h"


/////////////////////////////////////////////////////////////////////////////
// CTreeMapSeries properties

/////////////////////////////////////////////////////////////////////////////
// CTreeMapSeries operations

long CTreeMapSeries::Add(LPCTSTR Text, long Superior)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xc9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Text, Superior);
	return result;
}

long CTreeMapSeries::FirstChild(long ValueIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xca, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		ValueIndex);
	return result;
}

COrgItem CTreeMapSeries::GetItem(long Index)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Index);
	return COrgItem(pDispatch);
}

COrgShape CTreeMapSeries::GetFormat()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xcd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COrgShape(pDispatch);
}

COrgItemCollection CTreeMapSeries::GetItems()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COrgItemCollection(pDispatch);
}

long CTreeMapSeries::GetLineStyle()
{
	long result;
	InvokeHelper(0xcf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTreeMapSeries::SetLineStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xcf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CSpacing CTreeMapSeries::GetSpacing()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xd0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CSpacing(pDispatch);
}

long CTreeMapSeries::GetMapStyle()
{
	long result;
	InvokeHelper(0x12e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTreeMapSeries::SetMapStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CTreeMapSeries::GetPaletteSteps()
{
	long result;
	InvokeHelper(0x12f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CTreeMapSeries::SetPaletteSteps(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double CTreeMapSeries::GetValue(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x130, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void CTreeMapSeries::SetValue(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x130, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

long CTreeMapSeries::AddValue(double AValue, LPCTSTR ALabel, long ASuperior, unsigned long AColor)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x131, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		AValue, ALabel, ASuperior, AColor);
	return result;
}
