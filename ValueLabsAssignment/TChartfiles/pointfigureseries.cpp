// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pointfigureseries.h"

// Dispatch interfaces referenced by this interface
#include "seriespointeritems.h"
#include "pen.h"
#include "brush.h"
#include "teeshadow.h"
#include "valuelist.h"
#include "pointer.h"


/////////////////////////////////////////////////////////////////////////////
// CPointFigureSeries properties

/////////////////////////////////////////////////////////////////////////////
// CPointFigureSeries operations

CSeriesPointerItems CPointFigureSeries::GetPointer()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x641, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CSeriesPointerItems(pDispatch);
}

BOOL CPointFigureSeries::GetStairs()
{
	BOOL result;
	InvokeHelper(0x642, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetStairs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x642, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CPointFigureSeries::GetInvertedStairs()
{
	BOOL result;
	InvokeHelper(0x643, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetInvertedStairs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x643, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CPen1 CPointFigureSeries::GetLinePen()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x644, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPen1(pDispatch);
}

long CPointFigureSeries::GetLineBrush()
{
	long result;
	InvokeHelper(0x645, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetLineBrush(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x645, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CPointFigureSeries::GetClickableLine()
{
	BOOL result;
	InvokeHelper(0x646, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetClickableLine(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x646, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CPointFigureSeries::GetLineHeight()
{
	long result;
	InvokeHelper(0x647, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetLineHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x647, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CPointFigureSeries::GetDark3D()
{
	BOOL result;
	InvokeHelper(0x648, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetDark3D(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x648, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CBrush1 CPointFigureSeries::GetBrush()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x649, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CBrush1(pDispatch);
}

BOOL CPointFigureSeries::GetColorEachLine()
{
	BOOL result;
	InvokeHelper(0x64a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetColorEachLine(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x64a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CPen1 CPointFigureSeries::GetOutline()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x64b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPen1(pDispatch);
}

long CPointFigureSeries::GetTransparency()
{
	long result;
	InvokeHelper(0x64c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetTransparency(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x64c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CTeeShadow CPointFigureSeries::GetShadow()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x64d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CTeeShadow(pDispatch);
}

long CPointFigureSeries::GetTreatNulls()
{
	long result;
	InvokeHelper(0x64e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetTreatNulls(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x64e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CPointFigureSeries::GetSmoothed()
{
	BOOL result;
	InvokeHelper(0x64f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetSmoothed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x64f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CPointFigureSeries::GetClickTolerance()
{
	long result;
	InvokeHelper(0x650, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetClickTolerance(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x650, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CPointFigureSeries::GetDrawStyle()
{
	long result;
	InvokeHelper(0x651, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetDrawStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x651, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CPointFigureSeries::GetInflateMargins()
{
	BOOL result;
	InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetInflateMargins(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CPointFigureSeries::GetPointerBehind()
{
	BOOL result;
	InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetPointerBehind(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CValueList CPointFigureSeries::GetCloseValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPointFigureSeries::GetDateValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPointFigureSeries::GetHighValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xe9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPointFigureSeries::GetLowValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xea, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

CValueList CPointFigureSeries::GetOpenValues()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xeb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CValueList(pDispatch);
}

long CPointFigureSeries::AddOHLC(double DateValue, double OpenValue, double HighValue, double LowValue, double CloseValue)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xec, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		DateValue, OpenValue, HighValue, LowValue, CloseValue);
	return result;
}

double CPointFigureSeries::GetBoxSize()
{
	double result;
	InvokeHelper(0xed, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetBoxSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double CPointFigureSeries::GetReversalAmount()
{
	double result;
	InvokeHelper(0xee, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void CPointFigureSeries::SetReversalAmount(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xee, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

CPointer CPointFigureSeries::GetDownSymbol()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xef, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointer(pDispatch);
}

CPointer CPointFigureSeries::GetUpSymbol()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xf0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPointer(pDispatch);
}

long CPointFigureSeries::GetInversionColumn(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf1, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index);
	return result;
}
